#!/usr/bin/env ruby

require "gtk3"
require "gstreamer"
require "fileutils"
require "date"

CURRENT_PATH = File.expand_path(File.dirname(__FILE__))
LIB_PATH = "#{CURRENT_PATH}/../lib"
DATA_PATH = "#{CURRENT_PATH}/../data"
CONFIG_DIR = File.expand_path("#{ENV['HOME']}/.config/gifshouldbedead")
USR_CSS = "#{CONFIG_DIR}/gifshouldbedead.css"



class GsbdWindow < Gtk::ApplicationWindow
  def initialize(application)
    super(application)
    name = "gsbd-window"
    header = Gtk::HeaderBar.new
    header.set_title("GifShouldBeDead")
    header.show_close_button = true
    header.name = "gsbd-headerbar"
    set_titlebar(header)
    record_button = Gtk::Button.new(:label => "Record")
    record_button.name = "gsbd-record"
    stop_button = Gtk::Button.new(:label => "Stop")
    stop_button.sensitive = false
    stop_button.name = "gsbd-stop"
    record_button.signal_connect "clicked" do |widget|
      stop_button.sensitive = true
      default_name = "#{ENV['HOME']}/#{Time.now.strftime("%d-%m-%Y-%H-%M.webm")}"
      @recorder = Recorder.new(default_name, 0, 0)
      @recorder.record
       widget.sensitive = false
    end

    stop_button.signal_connect "clicked" do |widget|
      @recorder.stop_record if @recorder
      record_button.sensitive = true
      widget.sensitive = false
    end

    set_default_size(-1, 0)
    header.pack_start(record_button)
    header.pack_end(stop_button)

    signal_connect("delete_event") { Gtk.main_quit }
    show_all
  end
end

class Recorder
  def initialize(output_file, startx = 0, starty = 0, endx = nil, endy=nil)
    @pipeline = Gst::Pipeline.new("my-pipeline")
    desc = "ximagesrc " + "startx=#{startx} starty=#{starty} "
    desc += "endx=#{endx} " if endx
    desc += "endy=#{endy} " if endy
    desc += "name=\"videosrc\" !video/x-raw,framerate=25/1 ! queue ! videoconvert ! queue ! vp8enc ! queue"

    videobin = Gst.parse_bin_from_description(desc, true)
    mux = Gst::ElementFactory.make("webmmux")
    sink = Gst::ElementFactory.make("filesink")
    sink.location = output_file
    @pipeline << videobin << mux << sink
    videopad = mux.get_request_pad("video_%u")
    videobin.get_static_pad("src").link(videopad)
    mux.link(sink)
  end

  def record
    @pipeline.state = :playing
  end

  def stop_record
    eos_event = Gst::Event.new
    eos_event.type = Gst::EventType::EOS
    @pipeline.send_event(eos_event)
    @pipeline.state = :null
  end
end

require "optparse"

class GsbdApplication < Gtk::Application
  attr_accessor :settings
  def initialize
    @options = {}
    @exit_status = 0

    super("com.github.cedlemo.gifshouldbedead", [:non_unique,:handles_command_line])

    signal_connect "startup" do |application|
      check_and_create_if_no_config_dir
      initialize_css_provider
      load_css_config
    end

    signal_connect "activate" do |application|

      window = GsbdWindow.new(application)
      window.present
    end

    signal_connect "command-line" do |_application, command_line|
      begin
        parse_command_line(command_line.arguments)
      rescue SystemExit => error
        error.status
      rescue OptionParser::InvalidOption => error
        STDERR.puts error.message
        1
      rescue => error
        STDERR.puts "#{error.class}: #{error.message}"
        STDERR.puts error.backtrace
        1
      else
        activate
        @exit_status
      end
    end
  end

  private

  def parse_command_line(arguments)
    parser = OptionParser.new
    parser.on("-x", "--xposition X_COORDINATE", Integer, "X position to start recording") do |x|
      @options[:x] = x
    end
    parser.on("-y", "--yposition Y_COORDINATE", Integer, "Y position to start recording") do |y|
      @options[:y] = y
    end
    parser.on("-w", "--width WIDTH", Integer, "Width of the recording") do |w|
      @options[:w] = w
    end
    parser.on("-h", "--height HEIGHT", Integer, "Height of the recording") do |h|
      @options[:h] = h
    end
    parser.on("-o", "--output FILENAME", String, "Name for the ouput file") do |o|
      @options[:o] = o
    end

    parser.parse(arguments)
  end

  def initialize_css_provider
    screen = Gdk::Display.default.default_screen
    @provider = Gtk::CssProvider.new
    Gtk::StyleContext.add_provider_for_screen(screen,
                                              @provider,
                                              Gtk::StyleProvider::PRIORITY_USER)
  end

  def load_custom_css(file)
    @css_content = File.open(file, "r").read
    @provider.load(:data => @css_content)
  end

  def load_css_config
    return unless File.exists?(USR_CSS)
    begin
      load_custom_css(css_file)
    rescue => e
      puts "Bad css file using default css #{e.message}"
      error_popup = GshbdCssErrorPopup.new(self.windows.first)
      error_popup.message = e.message + "\n\nBad css file using default css"
      error_popup.show_all
    end
  end

  def check_and_create_if_no_config_dir
    Dir.mkdir(CONFIG_DIR) unless Dir.exist?(CONFIG_DIR)
  end
end

class GsbdCssErrorPopup < Gtk::MessageDialog

  def initialize(parent)
    super(:parent => parent, :flags => 0,
          :type => Gtk::MessageType::ERROR,
          :buttons_type => Gtk::ButtonsType::CLOSE,
          :message => "Css Error")

    @message = Gtk::Label.new("")
    content_area.add(@message)
    signal_connect("response") { |widget| widget.destroy }
  end

  def message=(message)
    @message.text = message
  end

  def message
    @message.text
  end
end

Signal.trap("INT") {
  STDERR.puts "\tgifshouldbedead processus pid = #{Process.pid} has been interrupted with Ctrl-C"
  exit
}

Signal.trap("TERM") {
  STDERR.puts "\tgifshouldbedead processus pid = #{Process.pid} has been killed"
  exit
}

gifshouldbedead = GsbdApplication.new

exit(gifshouldbedead.run([$PROGRAM_NAME] + ARGV))
